**MVVM 패턴

이 다이어그램은 Vue.js 애플리케이션에서 모델, 뷰, 뷰모델 간의 관계와 데이터 흐름을 시각적으로 이해하는 데 도움을 줍니다.

**보간법(inpterpolation)
 - 콧수염이라는 의미, {{ 출력 데이터 }} 형식
 - ViewModel에서 처리된 결과나 데이터를 보간법으로 View에 출력

View [유저 인터페이스] → 데이터 바인딩과 커맨드 → View Model [상태와 연산]
                      ←           알림 전송   ←
View Model [상태와 연산] → 업데이트 → Model [도메인 특화]
                        ← 알림전송 ← 

**View 템플릿 정의 : View는 HTML 템플릿을 통해 사용자 인터페이스를 정의합니다. 템플릿 내에서 
                    `{{ message }}` 바인딩을 통해 ViewModel의 데이터를 표시합니다.
**ViewModel Vue 인스턴스 생성 : ViewModel은 Vue 인스턴스를 생성하고, 모델 데이터를 컴포넌트의 상태로 포함합니다. 
                               `Vue.createApp` 메서드를 사용하여 새로운 Vue 애플리케이션을 생성합니다.
**Model 데이터 정의 : 모델은 애플리케이션에서 사용하는 데이터를 정의합니다. 
                      여기서 `model` 객체는 `message`라는 데이터를 포함하고 있습니다.

**상호작용 설명
 - 모델 데이터 정의 : `var model = { message: "Hello Vue3!" };` 코드를 통해 모델 데이터를 정의합니다.
 - **ViewModel 생성 : `Vue.createApp` 메서드를 사용하여 ViewModel을 생성하고, 이 ViewModel은 `data` 함수에서 모델 데이터를 
                      반환하여 Vue 인스턴스의 상태로 설정합니다.
 - **View 정의 : HTML 템플릿에서 `{{ message }}` 구문을 사용하여 ViewModel의 `message` 데이터를 바인딩합니다.
 - **데이터 바인딩 : ViewModel과 View 간의 양방향 데이터 바인딩이 설정됩니다. 이는 View에서 데이터가 변경될 때 ViewModel이 업데이트되고, 
                    반대로 ViewModel의 데이터가 변경될 때 View가 자동으로 업데이트됨을 의미합니다.

**동작 과정 요약
 - 모델(Model)에서 데이터를 정의합니다.
 - ViewModel에서 이 데이터를 Vue 인스턴스의 상태로 설정합니다.
 - View에서 템플릿을 통해 ViewModel의 데이터를 바인딩하여 사용자에게 표시합니다.
 - 데이터의 변경이 발생하면 양방향 데이터 바인딩을 통해 View와 ViewModel 간의 업데이트가 자동으로 이루어집니다.